services:
  # Ứng dụng chính
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reading-book-api-prod
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - NODE_ENV=production
      - APP_NAME=ReadingBook
      - APP_HOST=0.0.0.0
      - APP_PORT=9000
      - API_VERSION=v1
      - API_PREFIX=/api
      - LOG_LEVEL=info
      - LOG_FORMAT=combined
      - RATE_LIMIT=100
      - RATE_LIMIT_WINDOW=15
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE
      - CORS_CREDENTIALS=true
      - OTP_LENGTH=6
      - OTP_EXPIRY=300
      - OTP_PROVIDER=email
      - CACHE_TTL=300
      - CACHE_CHECKPERIOD=120
      - UPLOAD_LIMIT=5mb
      - ALLOWED_FORMATS=jpg,jpeg,png,pdf,epub
      - STORAGE_PATH=uploads/
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
    networks:
      - reading-book-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: reading-book-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - reading-book-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: reading-book-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - reading-book-network

networks:
  reading-book-network:
    driver: bridge

volumes:
  redis_prod_data:
